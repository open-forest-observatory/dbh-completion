#### Project-level parameters:

# Project to load. If not a blank string, this will open an existing project at the path specified. If a blank string, creates a new empty project.
# Even if opening an existing project, all processing on it is saved as a new project (path and name specified below). The original project file is not modified.
load_project: ""

# The path to the directory of flight photos
# If there are multiple photo folders, set path to the folder that contains all the photo folders
# If there are no photos to add (e.g., this is an existing project that already has photos in it, set to an empty string ("")
photo_path: "/ofo-share/dbh-completion_data/drone-imagery-prepped/composite-v3"
multispectral: False # Is this a multispectral photo set? If RGB, set to False.

# Path for exports (e.g., points, DSM, orthomosaic) and processing log. Will be created if does not exist.
output_path: "/ofo-share/dbh-completion_data/metashape-outputs"

# Path to save Metashape project file (.psx). Will be created if does not exist
project_path: "/ofo-share/dbh-completion_data/metashape-outputs"

# The identifier for the run. Will be used in naming output files. Recommended to include a photoset name and processing parameter set name.
# Optionally, set it to "from_config_filename" to use the config file name (minus extension) as the run name
run_name: "from_config_filename"

# CRS EPSG code that project outputs should be in (projection should be in meter units and intended for the project area)
project_crs: "EPSG::26910" # 26910 is UTM 10N

# Enable metashape "fine-level task subdivision" which reduces memory use by breaking processing into independent chunks that are run in series.
# Assuming there's enough memory, it seems to run 10-20% faster by disabling subdividing. But large projects can run out memory and fail if subdivide is not enabled.
subdivide_task: True

# Should CUDA GPU driver be used? Alternative is OpenCL. Metashape uses CUDA by default but we have observed it can cause crashes on HPC infrastructure.
use_cuda: True

# What value to use for the Metashape tweak "depth_max_gpu_multiplier"? May help to mitigate GPU errors per: https://www.agisoft.com/forum/index.php?topic=11771.0, but doesn't appear to do anything per our testing. Metashape default is 2.
gpu_multiplier: 2

#### Processing parameters:
## Steps can be run or skipped using the 'enabled' parameter. If enabled == False, everything else in the step is irrelevant.
## The metashape functions powering each of these steps are listed in the comments in parentheses.
## Refer to Metashape documentation for full parameter definitions: https://www.agisoft.com/pdf/metashape_python_api_1_5_0.pdf
## Parameter names here generally follow the parameter names of the Metashape functions.

### Whether to use image EXIF RTK flags to make image geospatial accuracy more precise. If enabled but photos don't have RTK data, will treat them as regular photos and use the nofix accuracy.
use_rtk: False
fix_accuracy: 3 # Accuracy to set for photos that have a RTK fix, in units of the CRS
nofix_accuracy: 25 # Accuracy to set for photos that have no fix, in units of the CRS

# To use GCPs, a 'gcps' folder must exist in the top level photos folder. The contents of the 'gcps' folder are created by the prep_gcps.R script. See readme: https://github.com/ucdavis/metashape
addGCPs:
  enabled: True
  gcp_crs: "EPSG::26910" # CRS EPSG code of GCP coordinates. 26910 (UTM 10 N) is the CRS of the sample RGB photoset.
  marker_location_accuracy: 0.1 # Accuracy of GCPs real-world coordinates, in meters.
  marker_projection_accuracy: 8 # Accuracy of the identified locations of the GCPs within the images, in pixels.
  optimize_w_gcps_only: True # Optimize alignment using GCPs only: required for GCP locations to take precedence over photo GPS data. Disabling it makes GCPs essentially irrelevant.

calibrateReflectance: # (Metahsape: calibrateReflectance)
  enabled: False
  panel_filename: "RP04-1923118-OB.csv" # The calibration file must be in the "calibration" folder in the top-level project photos directory. See example panel calibration file in the calibration directory of project repo.
  use_reflectance_panels: True
  use_sun_sensor: True

alignPhotos: # (Metashape: matchPhotos, alignCameras)
  enabled: True
  downscale: 2 # How much to coarsen the photos when searching for tie points. Higher number for blurrier photos or when there are small surfaces that may move between photos (such as leaves). Accepts numbers 2^x (and zero) (https://www.agisoft.com/forum/index.php?topic=11697.0).
  adaptive_fitting: True # Should the camera lens model be fit at the same time as aligning photos?
  keep_keypoints: True # Should keypoints from matching photos be stored in the project? Required if you later want to add more photos and align them to the previously aligned photos without redoing the original alignment.
  reset_alignment: False # When running an alignment, if any of the photos were already aligned, should we keep that alignment? Or reset it so we align everything anew?
  generic_preselection: True # When matching photos, use a much-coarsened version of each photo to narrow down the potential neighbors to pair? Works well if the photos have high altitude above the surface and high overlap (e.g. a 120m nadir 90/90 overlap mission), but doesn't work well for low-altitude and/or highly oblique photos (e.g. a 80m 25deg pitch 80/80 overlap mission)
  reference_preselection: True # When matching photos, use the camera location data to narrow down the potential neighbors to pair?
  reference_preselection_mode: Metashape.ReferencePreselectionSource # When matching photos, use the camera location data to narrow down the potential neighbors to pair?

filterPointsUSGS:
  enabled: False
  rec_thresh_percent: 20
  rec_thresh_absolute: 15
  proj_thresh_percent: 30
  proj_thresh_absolute: 2
  reproj_thresh_percent: 5
  reproj_thresh_absolute: 0.3

optimizeCameras: # (Metashape: optimizeCameras)
  enabled: True
  adaptive_fitting: True # Should the camera lens model be fit at the same time as optimizing photos?

buildPointCloud: # (Metashape: buildDepthMaps, buildPointCloud, (optionally) classifyGroundPoints, and exportPoints)
  enabled: True
  ## For depth maps (buildDepthMaps)
  downscale: 2 # How much to coarsen the photos when searching for matches to build the point cloud. For large photosets, values < 4 likely take prohibitively long. Accepts numbers 2^x (https://www.agisoft.com/forum/index.php?topic=11697.0).
  filter_mode: Metashape.MildFiltering # How to filter the point cloud. Options are NoFiltering, MildFiltering, ModerateFiltering, AggressiveFiltering. Aggressive filtering removes detail and makes worse DEMs (at least for forest). NoFiltering takes very long. In trials, it never completed.
  reuse_depth: False # Purpose unknown.
  ## For point cloud (buildPointCloud)
  keep_depth: False # Purpose unknown.
  ## For both
  max_neighbors: 250 # Maximum number of neighboring photos to use for estimating point cloud. Higher numbers may increase accuracy but dramatically increase processing time.
  ## For ground point classification (classifyGroundPoints). Definitions here: https://www.agisoft.com/forum/index.php?topic=9328.0
  classify_ground_points: True # Should ground points be classified as a part of this step? Must be enabled (either here or in buildDem, below) if a digital terrain model (DTM) is needed either for orthomosaic or DTM export. Enabling here is an alternative to enabling as a component of buildDem (below). It depends on which stage you want the classification to be done at. If you already have a point cloud but it's unclassified, then don't do it as part of this stage as it would require computing the point cloud again.
  ## For point cloud export (exportPoints)
  export: True # Whether to export point cloud file.
  classes: "ALL" # Point classes to export. Must be a list. Or can set to "ALL" to use all points. An example of a specific class is: Metashape.PointClass.Ground

classifyGroundPoints: # (Metashape: classifyGroundPoints) # classify points, IF SPECIFIED as a component of buildPointCloud (above) or buildDem (below). Must be enabled (either here or in buldDem, below) if a digital terrain model (DTM) is needed either for orthomosaic or DTM export. 
  max_angle: 15.0
  max_distance: 1.0
  cell_size: 50.0

buildDem: # (Metashape: buildDem, (optionally) classifyGroundPoints, exportRaster)
  enabled: False
  classify_ground_points: False # Should ground points be classified as part of this step? Note that an alternative is to calculate them as a part of buildPointCloud (above)
  ## For building DEM (buildDem)
  type: "both" # Options: "DSM" or "DTM" or "both". Type of DEM to export (digital surface model, digital terrain model, or both).
  ## For exporting DEM (exportRaster)
  export: True # Whether to export DEM(s)
  tiff_big: True # Use BigTIFF format? Required for larger projects with large DEMs
  tiff_tiled: False # Use tiled TIFF? This is related to internal file architecture.
  nodata: -32767 # Value used to represent nodata.
  tiff_overviews: True # Include coarse-scale raster data in file for quick display in GIS.

buildOrthomosaic: # (Metashape: buildOrthomosaic, exportRaster)
  enabled: False
  ## For building orthomosaic (buildOrthomosaic)
  surface: "DSM" # The surface to build the orthomosaic onto. "DTM", "DSM", "USGS", or "DTMandDSM. DTM and DSM refer to elevation models built by Metashape (buildDem step above) and stored in the project. If USGS, you must use GCPs with accurate elevations (ideally extracted from the USGS DEM).
  usgs_dem_path: "dem_usgs/dem_usgs.tif" # Path to USGS DEM for the project area. Needed if surface (parameter above) is "USGS".
  usgs_dem_crs: "EPSG::4269" # CRS of the USGS DEM. Needed if surface (parameter above) is "USGS". For sample RGB photoset, crs is 4269 (Geographic NAD83)
  blending: Metashape.MosaicBlending # Photo blending mode. Options include AverageBlending, MosaicBlending, MinBlending, MaxBlending, DisabledBlending
  fill_holes: True # Fill holes in orthomosaic where no photo data exist by interpolating?
  refine_seamlines: True # Use smart algorithm to identify photo seamlines where they will least distort.
  ## For exporting orthomosaic (exportRaster)
  export: True # Whether to export orthomosaic
  tiff_big: True # Use BigTIFF format? Required for larger projects with large DEMs
  tiff_tiled: False # Use tiled TIFF? This is related to internal file architecture.
  nodata: -32767 # Value used to represent nodata.
  tiff_overviews: True # Include coarse-scale raster data in file for quick display in GIS.